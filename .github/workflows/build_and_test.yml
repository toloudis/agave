name: C++ Build
on:
  push:
    branches-ignore:
      - "master"
jobs:
  cmake-build:
    strategy:
      max-parallel: 6
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - name: Checkout submodules
        shell: bash
        run: |
          # If your submodules are configured to use SSH instead of HTTPS please uncomment the following line
          # git config --global url."https://github.com/".insteadOf "git@github.com:"
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
      - uses: ilammy/msvc-dev-cmd@v1.0.1
      - name: Install Python 3.8 version
        uses: actions/setup-python@v1
        with:
          python-version: "3.8"
          architecture: "x64"
      - name: Install Qt
        uses: ouuan/install-qt-action@v2.4.1
        with:
          version: 5.12.6
          # aqtversion: "==0.7.1"
      - name: macos build and test
        if: matrix.os == 'macOS-latest'
        env:
          CC: clang
          CXX: clang++
        run: |
          brew install boost libtiff glm
          mkdir ./build
          cd build
          cmake ..
          cmake --build . --target agave_test --config Release
          sudo cmake --build . --target install --config Release
        shell: bash
      - name: linux build and test
        if: matrix.os == 'ubuntu-latest'
        env:
          CC: gcc
          CXX: g++
        run: |
          sudo apt-get install libboost-all-dev libtiff-dev libglm-dev libgl1-mesa-dev
          pwd
          mkdir ./build
          cd build
          cmake ..
          cmake --build . --target agave_test --config Release
          cmake --build . --target install --config Release
        shell: bash
      - name: windows build and test
        if: matrix.os == 'windows-latest'
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          vcpkg install --triplet x64-windows tiff glm boost-chrono boost-log boost-iostreams boost-thread boost-system boost-filesystem boost-date-time boost-atomic
          mkdir build
          cd build
          cmake -DCMAKE_TOOLCHAIN_FILE="%VCPKG_INSTALLATION_ROOT%\scripts\buildsystems\vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows -A x64 ..
          cmake --build . --target agave_test --config Release
          cmake --build . --target install --config Release
        shell: cmd
